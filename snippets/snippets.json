{
  "Import react": {
    "prefix": "importReact",
    "body": [
      "import React from 'react';"
    ],
    "description": "Import react"
  },
  "Generate react tests": {
    "prefix": "reactTests",
    "body": [
      "import React from 'react';",
      "import * as Adapter from 'enzyme-adapter-react-16';",
      "",
      "import {spy} from 'sinon';",
      "import {expect} from 'chai';",
      "import {configure, mount, shallow} from 'enzyme';",
      "",
      "${2:import $1 from './$1';}",
      "",
      "configure({adapter: new Adapter()});",
      "",
      "describe('<$1 />', () => {",
      "\tit('mount renders', () => {",
      "\t\tmount(<$1 />);",
      "\t});",
      "\tit('shallow renders', () => {",
      "\t\tshallow(<$1 />);",
      "\t});",
      "});"
    ],
    "description": "Generate react tests with enzyme, chai and sinon"
  },
  "Generate react component": {
    "prefix": "reactComponent",
    "body": [
      "import React from 'react';",
      "",
      "export const ${1:ComponentName}: React.FC = ($2) => {",
      "\treturn ${0:null};",
      "};"
    ],
    "description": "Generate react component with props"
  },
  "Generate react component with props": {
    "prefix": "reactComponentWithProps",
    "body": [
      "import React from 'react';",
      "",
      "interface $1Props {}",
      "",
      "export const ${1:ComponentName}: React.FC<$1Props> = ($2) => {",
      "\treturn ${0:null};",
      "};"
    ],
    "description": "Generate react component with props"
  },
  "Generate react use ref hook": {
    "prefix": "reactUseRefHook",
    "body": [
      "const $1Ref = React.useRef() as React.RefObject<HTML$0Element>;"
    ],
    "description": "Generate react ref hook"
  },
  "Generate react use state hook": {
    "prefix": "reactUseStateHook",
    "body": [
      "const [$1, set${1/(^[a-z])(.*)/${1:/upcase}$2/}] = React.useState($0);"
    ],
    "description": "Generate react state hook"
  },
  "Generate react use callback hook": {
    "prefix": "reactUseCallbackHook",
    "body": [
      "const $1 = React.useCallback(() => null}, []);"
    ],
    "description": "Generate react callback hook"
  }
}