{
    "Import react": {
        "prefix": "importReact",
        "body": [
            "import * as React from 'react';"
        ],
        "description": "Import react"
    },
    "Import react and redux": {
        "prefix": "importReactAndRedux",
        "body": [
            "import * as React from 'react';",
            "import {compose} from 'recompose';",
            "import {connect} from 'react-redux';",
            "import {Dispatch} from 'redux';"
        ],
        "description": "Import react and redux"
    },
    "Generate react component": {
        "prefix": "reactComponent",
        "body": [
            "import * as React from 'react';",
            "",
            "export default class $1 extends React.PureComponent {",
            "",
            "\tpublic render(): React.ReactNode {",
            "\t\treturn $2;",
            "\t}",
            "",
            "}"
        ],
        "description": "Generate react component"
    },
    "Generate react component with props": {
        "prefix": "reactComponentWithProps",
        "body": [
            "import * as React from 'react';",
            "",
            "interface $1Props {",
            "}",
            "",
            "export default class $1 extends React.PureComponent<$1Props> {",
            "",
            "\tpublic render(): React.ReactNode {",
            "\t\treturn $2;",
            "\t}",
            "",
            "}"
        ],
        "description": "Generate react component with props"
    },
    "Generate react component with props and state": {
        "prefix": "reactComponentWithPropsAndState",
        "body": [
            "import * as React from 'react';",
            "",
            "interface $1Props {",
            "}",
            "",
            "interface $1State {",
            "}",
            "",
            "export default class $1 extends React.PureComponent<$1Props, $1State> {",
            "",
            "\tpublic render(): React.ReactNode {",
            "\t\treturn $2;",
            "\t}",
            "",
            "}"
        ],
        "description": "Generate react component with props and state"
    },
    "Generate react component with redux": {
        "prefix": "reactComponentWithRedux",
        "body": [
            "import * as React from 'react';",
            "import {compose} from 'recompose';",
            "import {connect} from 'react-redux';",
            "import {Dispatch} from 'redux';",
            "",
            "interface $1Props {",
            "}",
            "",
            "interface $1StateProps {",
            "}",
            "",
            "interface $1DispatchProps {",
            "}",
            "",
            "interface $1CombinedProps extends $1Props, $1StateProps, $1DispatchProps {",
            "}",
            "",
            "class $1 extends React.PureComponent<$1CombinedProps> {",
            "",
            "\tpublic render(): React.ReactNode {",
            "\t\treturn $2;",
            "\t}",
            "",
            "}",
            "",
            "function mapStateToProps(state: RootState): $1StateProps {",
            "\treturn {};",
            "}",
            "",
            "function mapDispatchToProps(dispatch: Dispatch): $1DispatchProps {",
            "\treturn {};",
            "}",
            "",
            "export default compose<$1CombinedProps, $1Props>(",
            "\tconnect(mapStateToProps, mapDispatchToProps),",
            ")($1);"
        ],
        "description": "Generate react component with redux"
    },
    "Generate react render()": {
        "prefix": "render",
        "body": [
            "public render(): React.ReactNode {",
            "\treturn $1;",
            "}"
        ],
        "description": "Generate react render()"
    },
    "Generate react componentWillMount()": {
        "prefix": "componentWillMount",
        "body": [
            "public componentWillMount(): void {",
            "\t$1",
            "}"
        ],
        "description": "Generate react componentWillMount()"
    },
    "Generate react componentWillUpdate()": {
        "prefix": "componentWillUpdate",
        "body": [
            "public componentWillUpdate(): void {",
            "\t$1",
            "}"
        ],
        "description": "Generate react componentWillUpdate()"
    },
    "Generate react componentDidMount()": {
        "prefix": "componentDidMount",
        "body": [
            "public componentDidMount(): void {",
            "\t$1",
            "}"
        ],
        "description": "Generate react componentDidMount()"
    },
    "Generate react componentWillReceiveProps()": {
        "prefix": "componentWillReceiveProps",
        "body": [
            "public componentWillReceiveProps(props: $1CombinedProps): void {",
            "\t$2",
            "}"
        ],
        "description": "Generate react componentWillReceiveProps()"
    },
    "Generate react tests": {
        "prefix": "reactTests",
        "body": [
            "import * as React from 'react';",
            "import * as Adapter from 'enzyme-adapter-react-16';",
            "",
            "import {spy} from 'sinon';",
            "import {expect} from 'chai';",
            "import {configure, mount, shallow} from 'enzyme';",
            "",
            "import $1 from '$1';",
            "",
            "configure({adapter: new Adapter()});",
            "",
            "describe('<$1/>', () => {",
            "\tit('mount renders', () => {",
            "\t\tmount(<$1/>);",
            "\t});",
            "\tit('shallow renders', () => {",
            "\t\tshallow(<$1/>);",
            "\t});",
            "});"
        ],
        "description": "Generate react tests with enzyme, chai and sinon"
    }
}